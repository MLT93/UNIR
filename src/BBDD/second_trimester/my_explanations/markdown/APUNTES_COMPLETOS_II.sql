/* EJEMPLO CREACIÓN BASE DE DATOS PANADERIA */

CREATE DATABASE PANADERIA;
USE PANADERIA;

CREATE TABLE CAJA(
	COD INTEGER PRIMARY KEY AUTO_INCREMENT,
    VENDEDOR VARCHAR(20) NOT NULL COMMENT 'USUARIO TIENDA',
    FECHA TIMESTAMP DEFAULT current_timestamp,
    PAGO VARCHAR(10) NOT NULL COMMENT 'TARJETA, METALICO, CHEQUES, TRANSFERENCIA',
    ESTABLECIMIENTO VARCHAR(50),
    CPCLI VARCHAR(5)
);

/* CARGA DE DATOS DE MUESTRA EN LA TABLA CAJA PARA PODER INSERTAR DATOS EN TICKET */
INSERT INTO CAJA (VENDEDOR,PAGO, ESTABLECIMIENTO, CPCLI) 
VALUES ('PEPE','CASH','LEGANES','28609');
SELECT * FROM CAJA;

CREATE TABLE PRODUCTOS(
	COD INTEGER PRIMARY KEY AUTO_INCREMENT,
    NOMBRE VARCHAR(100) NOT NULL,
    PREUNI FLOAT NOT NULL,
    ORIGEN VARCHAR(30),
    CATEGORIA VARCHAR(20)
);

/* CARGA DE DATOS DE MUESTRA EN LA TABLA PRODUCTOS PARA PODER INSERTAR DATOS EN TICKET */
INSERT INTO PRODUCTOS (NOMBRE,PREUNI, ORIGEN, CATEGORIA) 
VALUES ('LONGANIZA PICANTE',8,'ESPAÑA','SUPERIOR');
SELECT * FROM PRODUCTOS;

CREATE TABLE TICKET(
	CODCAJ INTEGER NOT NULL,
    CODPRO INTEGER NOT NULL,
    CANTIDAD INTEGER NOT NULL,
    IMPORTE DOUBLE,
    FOREIGN KEY (CODCAJ) REFERENCES CAJA (COD),
    FOREIGN KEY (CODPRO) REFERENCES PRODUCTOS (COD)
);

/* INSERCIÓN DE DATOS EN LA TABLA INTERMEDIA TICKET, UNA VEZ EXISTEN LOS DATOS DE RELACIÓN
EN LAS TABLAS PRINCIPALES */

INSERT INTO TICKET VALUES (2,1,3,4.5);
SELECT * FROM TICKET;

/* AGRUPACIÓN POR CODCAJ DEL IMPORTE TOTAL DEL TICKET CON IVA */
SELECT CODCAJ, SUM(IMPORTE) * 1.21 FROM TICKET GROUP BY CODCAJ;


/* TABLA DE PRUEBA PARA CARGA DE DATOS */

CREATE TABLE ALMACEN(
	REF INTEGER NOT NULL,
    DESCRIPCION VARCHAR(50),
    UNIADES INTEGER,
    PROVEEDOR VARCHAR(50),    
    PUNITARIO FLOAT,
    PRECIOT FLOAT
);

/* COMPROBACIÓN DE VARIABLES ACTIVAS PARA LA CARGA DESDE FICHERO */
SHOW VARIABLES LIKE "local_infile";
SET GLOBAL local_infile = 'ON';

LOAD DATA INFILE 
'C:/ARCHIVOS/PRODUCTOS.txt'
INTO TABLE ALMACEN
FIELDS TERMINATED BY ';'
IGNORE 1 LINES;

/* SELECCIÓN Y CARGA DE DATOS EN UN FICHERO EXTERNO */

SELECT * FROM ACTORES INTO 
OUTFILE 'C:/ARCHIVOS/actores.txt' 
FIELDS terminated by ';' 
LINES TERMINATED BY '\n';

/* EJERCICIO DE CARGA FICHERO CON DATOS HETEROGENEOS PARA CARGA EN LA SIGUIENTE TABLA */
CREATE TABLE GENTE(
	NOMBRE VARCHAR(20),
    EDAD INTEGER,
    VACACIONES INTEGER,
    CIUDAD VARCHAR(20)
);

LOAD DATA INFILE 
'C:/ARCHIVOS/PRUEBA.txt'
INTO TABLE GENTE
FIELDS TERMINATED BY ','
LINES TERMINATED BY ';' 
STARTING BY '--'
IGNORE 1 LINES;

/* CONTENIDO FICHERO PRUEBA */
HOLA --PEDRO,23,GETAFE;
--ANDREA,18,LEGANES; ADIOS
DASDASD --LUIS,14,BURGOS;

/* EJEMPLO CARGA CON LOAD FICHERO ACTORES */
CREATE TABLE IF NOT EXISTS ACTORES(
	COD CHAR(2),
    NOMBRE CHAR(25),
    NACIMIENTO CHAR(15),
    NACIONALIDAD CHAR(15),
    GENERO CHAR,
    TLF CHAR(15),
    EMAIL CHAR(30),
    PREMIOS CHAR(2),
    COTIZACION CHAR(10)
);

LOAD DATA INFILE 
'C:/ARCHIVOS/actores.txt'
INTO TABLE ACTORES
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\n';


/* SALIDA DE DATOS A FICHERO EXTERNO */
SELECT * FROM ACTORS 
INTO OUTFILE 'C:/ARCHIVOS/actos.txt' 
FIELDS TERMINATED BY '\t';


/* EJERCICIO PRUEBA DEFINICIÓN ON DELETE CASCADE, ON UPDATE CASCADE PARA REGISTROS
EN TABLAS RELACIONADAS CON FOREIGN KEY */
CREATE TABLE CLIENTES (
	NIF VARCHAR(15) PRIMARY KEY,
    NOMBRE VARCHAR(50),
    DIRECCIÓN VARCHAR(50)
);

CREATE TABLE PAGOS (
	NIF VARCHAR(15),
    IMPORTE DOUBLE,
    FOREIGN KEY (NIF) REFERENCES CLIENTES(NIF)
    ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO CLIENTES VALUES ('111111T','PEDRO MARTINEZ','C/ FLORIDA, 23');

INSERT INTO PAGOS VALUES ('52505013S',11850);

DELETE FROM CLIENTES WHERE NIF='111111T';
UPDATE CLIENTES SET NIF='52505553S' WHERE NIF='52505013S';

/* QUERYS EJEMPLO BASE DE DATOS NBA */

SELECT NOMBRE FROM JUGADORES ORDER BY NOMBRE ASC LIMIT 25;

SELECT DISTINCT DIVISION FROM EQUIPOS WHERE CONFERENCIA='WEST';

SELECT CONFERENCIA, COUNT(NOMBRE) FROM EQUIPOS WHERE CONFERENCIA='WEST';

SELECT *  FROM JUGADORES WHERE Procedencia='Spain' AND (Nombre_equipo='Lakers' OR  Nombre_equipo='Raptors');

SELECT *  FROM JUGADORES WHERE Nombre_equipo LIKE '%wolv%';

SELECT * FROM JUGADORES WHERE PESO > 200 AND PESO < 260;

SELECT UCASE(CONCAT_WS('-',codigo,LEFT(Procedencia,2),Posicion)) AS CODIGO_ACCESO 
FROM JUGADORES WHERE PESO BETWEEN 200 AND 260 AND (Nombre_equipo='Lakers' OR Nombre_equipo='Raptors' OR Nombre_equipo='Bulls');

SELECT * FROM jugadores WHERE PROCEDENCIA LIKE 'F_O%';
SELECT * FROM jugadores WHERE PROCEDENCIA LIKE '[ads]';

SELECT * FROM JUGADORES WHERE PROCEDENCIA NOT IN ('Florida','Utah','Spain');

SELECT * FROM JUGADORES WHERE (PROCEDENCIA='Spain' and PESO>180) OR ((NOT PROCEDENCIA='Florida') AND (NOT PESO>200));

SELECT PROCEDENCIA,AVG(PESO)/2.2 FROM JUGADORES WHERE (PROCEDENCIA='Serbia' and PESO>=215) OR (Nombre_equipo='Timberwolves' AND (NOT posicion = 'g')) GROUP BY  PROCEDENCIA ;

SELECT PROCEDENCIA, NOMBRE FROM JUGADORES ORDER BY PROCEDENCIA ASC, NOMBRE ASC;

SELECT Nombre_equipo, round(avg(peso)/2.2,2) FROM JUGADORES GROUP BY NOMBRE_EQUIPO HAVING AVG(PESO/2.2)<= 100 ORDER BY NOMBRE_EQUIPO ASC;

SELECT  NOMBRE_EQUIPO, MAX(PESO)/2.2,MIN(PESO)/2.2,AVG(PESO)/2.2 FROM JUGADORES GROUP BY NOMBRE_EQUIPO;

SELECT PROCEDENCIA, NOMBRE, NOMBRE_EQUIPO FROM JUGADORES WHERE PROCEDENCIA IS NOT NULL;

SELECT CIUDAD, EQUIPOS.NOMBRE,JUGADORES.NOMBRE FROM EQUIPOS, JUGADORES, PARTIDOS WHERE EQUIPOS.NOMBRE=JUGADORES.NOMBRE_EQUIPO;

/* BASE DE DATOS EJEMPLO CREACIÓN TABLAS RELACIONADAS Y JOINS EN QUERYS */

CREATE DATABASE JOINS;
USE JOINS;

CREATE TABLE CLIENTES(
	COD INT PRIMARY KEY auto_increment,
    RAZON VARCHAR(40) NOT NULL,
    PRODUCTO INTEGER
);

ALTER TABLE CLIENTES MODIFY COLUMN RAZON VARCHAR(40);
CREATE TABLE PRODUCTOS (
	REF INTEGER PRIMARY KEY auto_increment,
    NOMBRE VARCHAR(20)
);

INSERT INTO CLIENTES (RAZON) VALUES (NULL);

INSERT INTO PRODUCTOS (NOMBRE) VALUES ('SILLA PLAYA'),
('BARBACOA METAL'),
('SOMBRILLA COVID'),
('GEL HIDROALCOHOLICO'),
('ALETAS NIÑOS'),
('FLOTADOR FLAMENTO');
 
SELECT RAZON, PRODUCTO, NOMBRE FROM CLIENTES LEFT OUTER JOIN PRODUCTOS ON CLIENTES.PRODUCTO = PRODUCTOS.REF WHERE CLIENTES.RAZON IS NULL;

ALTER TABLE CLIENTES DROP COLUMN COD;

SELECT RAZON, PRODUCTO, NOMBRE FROM CLIENTES RIGHT JOIN PRODUCTOS ON CLIENTES.PRODUCTO = PRODUCTOS.REF;

SELECT RAZON, PRODUCTO, NOMBRE FROM CLIENTES, PRODUCTOS WHERE CLIENTES.PRODUCTO = PRODUCTOS.REF;


/* QUERYS EN NBA */

SELECT * FROM JUGADORES WHERE NOMBRE = 'JamesOn Curry';

SELECT TEMPORADA,PUNTOS_POR_PARTIDO,ASISTENCIAS_POR_PARTIDO, TAPONES_POR_PARTIDO,REBOTES_POR_PARTIDO,NOMBRE, ALTURA,posicion
FROM ESTADISTICAS CROSS JOIN JUGADORES 
ON ESTADISTICAS.JUGADOR = JUGADORES.CODIGO 
WHERE TEMPORADA IS NULL ORDER BY TEMPORADA ASC;

SELECT EQUIPOS.NOMBRE,CIUDAD, CONFERENCIA, JUGADORES.NOMBRE,ALTURA,PESO
FROM EQUIPOS JOIN JUGADORES ON EQUIPOS.NOMBRE = JUGADORES.NOMBRE_EQUIPO;

SELECT nombre_equipo, nombre, ROUND(AVG(puntos_por_partido),2) AS Media_Partido FROM Estadisticas,jugadores WHERE jugador=codigo
AND procedencia LIKE 'Serbia Montenegro' GROUP BY nombre;

SELECT nombre_equipo,nombre, ROUND(AVG(puntos_por_partido),2),procedencia FROM jugadores,estadisticas WHERE jugador=codigo AND procedencia='Serbia Montenegro' GROUP BY nombre;

SELECT TEMPORADA,JUGADOR, PUNTOS_POR_PARTIDO FROM ESTADISTICAS WHERE JUGADOR IN (SELECT codigo FROM jugadores WHERE Nombre_equipo='Lakers') AND TEMPORADA='07/08';

SELECT JUGADOR, ROUND(AVG(REBOTES_POR_PARTIDO),2) AS MEDIA_REBOTES FROM ESTADISTICAS WHERE JUGADOR IN 
( SELECT CODIGO FROM JUGADORES WHERE NOMBRE_EQUIPO IN (SELECT NOMBRE  FROM EQUIPOS WHERE CONFERENCIA='East')) 
GROUP BY JUGADOR ORDER BY AVG(REBOTES_POR_PARTIDO) DESC;

#MEDIA DE REBOTES DE LOS JUGADORES DE LA CONFERENCIA EAST..
 SELECT JUGADOR, AVG(REBOTES_POR_PARTIDO) FROM ESTADISTICAS WHERE JUGADOR IN (SELECT CODIGO FROM JUGADORES WHERE NOMBRE_EQUIPO IN (SELECT NOMBRE FROM EQUIPOS WHERE CONFERENCIA='East')) GROUP BY JUGADOR;

/* ESTRUCTURA COMPLETA DE ELEMENTO EN QUERYS */
SELECT PROVINCIA,PAIS AS LUGAR 
FROM EMPRESA INNER JOIN SITUACION ON EMPRESA.PROVINCIA = SITUACION.PROV 
WHERE CIUDAD NOT IN ('MADRID','BURGOS','PALENCIA') AND CP<>'21342' AND PRESIDENCIA IS NOT NULL 
GROUP BY PAIS HAVING PROVINCIA <> 'ALSACIA' 
ORDER BY PAIS ASC, PROVINCIA ASC 
LIMIT 20;

# SI LAS TABLAS TIENEN FOREIGN KEY.... PODEMOS HACER INNER JOIN IMPLICITO
SELECT * FROM TABLA1, TABLA2 WHERE TABLA1.CAMPO = TABLA2.CAMPO;

# PUEDO HACER INNER JOIN, ENTRE TABLAS QUE NO TENGAN NINGUN FOREIGN KEY
SELECT * FROM TABLA1 INNER JOIN TABLA2 ON TABLA1.CAMPO = TABLA2.CAMPO;

# LEFT JOIN - MUESTRA TODOS LOS DATOS DE LA TABLA IZQUIERDA Y LAS COINCIDENCIAS DE LA OTRA
# RIGHT JOIN - MUESTRA TODOS LOS DATOS DE LA TABLA DERECHA Y LAS COINCIDENCIAS DE LA OTRA
# LEFT OUTER JOIN - RIGHT OUTER JOIN - MUESTRAN LOS REGISTROS CON COINCIDENTES EN LA RELACIÓN

# NATURAL JOIN - MUESTRA UNA RELACIÓN IMPLICITA ENTRA LAS TABLAS POR LOS CAMPOS QUE TIENEN UNA MISMA 
# TIPOLOGIA DE DATO Y NOMBRE

# CROSS JOIN - FULL OUTER JOIN - CRUCE DE TODOS LOS REGISTROS CON TODOS (NO SE PONE RELACIÓN ENTRE CAMPO).

SELECT * FROM EMPRESA WHERE CIF IN (SELECT CODFISCAL FROM IMPUESTOS2T WHERE CP='28009');
SELECT * FROM EMPRESA WHERE BIMES > (SELECT MAX(IMPORTEFAC) FROM FACTURACION WHERE MES='ENERO');
SELECT * FROM EMPRESA WHERE BIMES > ALL (SELECT IMPORTEFAC FROM FACTURACION WHERE MES='ENERO');
SELECT * FROM EMPRESA WHERE BIMES > ANY (SELECT IMPORTEFAC FROM FACTURACION WHERE MES='ENERO');
SELECT * FROM EMPRESA WHERE NOT EXISTS (SELECT NOMBRE FROM DEUDORES);


/*QUERYS DE EJEMPLO DE TODOS LOS TIPOS SOBRE LA BASE DE DATOS NBA*/
/*---------------------------------------------------------------*/
/*EQUIPOS Y CIUDAD DE LOS JUGADORES ESPAÑOLES DE LA NBA*/
SELECT NOMBRE_EQUIPO, PROCEDENCIA, JUGADORES.NOMBRE, CIUDAD 
FROM JUGADORES INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO = EQUIPOS.NOMBRE  
WHERE PROCEDENCIA='Spain';

/*EQUIPOS CUYO NOMBRE COMIENZA POR H Y FINALIZA POR S*/
SELECT NOMBRE FROM EQUIPOS WHERE NOMBRE LIKE 'H%S';

/*PUNTOS POR PARTIDO DE ‘PAU GASOL’ EN TODAS LAS TEMPORADAS*/
SELECT JUGADORES.NOMBRE, TEMPORADA, PUNTOS_POR_PARTIDO FROM ESTADISTICAS INNER JOIN JUGADORES ON
ESTADISTICAS.JUGADOR = JUGADORES.CODIGO WHERE NOMBRE = 'Pau Gasol';

/*EQUIPOS QUE HAY EN LA CONFERENCIA OESTE(WEST)*/
SELECT CONFERENCIA, COUNT(NOMBRE) FROM EQUIPOS WHERE CONFERENCIA = 'West';

/*JUGADORES DE ARIZONA QUE PESAN MÁS DE 100 KG Y MIDEN MÁS DE 1.82 M (1 PIE=30.48 CM)*/
SELECT NOMBRE, PESO, ALTURA, PROCEDENCIA FROM JUGADORES WHERE PROCEDENCIA = 'Arizona' AND PESO > 100 AND ALTURA > 182;

/*PUNTOS POR PARTIDO DE LOS JUGADORES DE LOS CAVALIERS*/
SELECT JUGADORES.NOMBRE,JUGADORES.NOMBRE_EQUIPO,PUNTOS_POR_PARTIDO
FROM ESTADISTICAS INNER JOIN JUGADORES ON ESTADISTICAS.JUGADOR=JUGADORES.CODIGO
WHERE JUGADORES.NOMBRE_EQUIPO='Cavaliers';


SELECT * FROM JUGADORES WHERE NOMBRE_EQUIPO LIKE 'CA%';
SELECT * FROM JUGADORES WHERE NOMBRE_EQUIPO LIKE 'CA____';

/* ACTUALIZACIÓN DE DATOS EN CAMPOS, PARA TRANSFORMAR LOS VALORES DEL MISMO CON UPDATE */
SET SQL_SAFE_UPDATES = 0;
UPDATE JUGADORES SET PESO=PESO*0.453592;

SELECT (LEFT(ALTURA,1)*0.3048)*100,(substring(ALTURA,3,2)*0.0833333) FROM JUGADORES;

UPDATE JUGADORES SET ALTURA = (LEFT(ALTURA,1)*0.3048)*100;

SELECT * FROM JUGADORES ORDER BY CODIGO ASC;

SET SQL_SAFE_UPDATES = 0; #PERMITIR UPDATES GLOBALES


/*JUGADORES CUYA 3ª LETRA DE SU NOMBRE ES UNA ‘V’*/
SELECT NOMBRE FROM JUGADORES WHERE NOMBRE LIKE '__V%';

/*CUÁNTOS JUGADORES TIENE CADA EQUIPO DE LA CONFERENCIA OESTE*/

/*CUANTOS JUGADORES ARGENTINOS JUEGAN EN LA NBA*/

/*EN QUÉ TEMPORADA LEBRON JAMES CONSIGUIÓ MÁS PUNTOS POR PARTIDO*/

/*ASISTENCIAS POR PARTIDO DE JOSE CALDERÓN EN LA TEMPORADA 07/08*/

/*PUNTOS POR PARTIDO DE LEBRON JAMES DE LA TEMPORADA 03/04 A LA 05/06*/

/*CUÁNTOS JUGADORES TIENE CADA EQUIPO DE LA CONFERENCIA ESTE(EAST)*/

/*TAPONES POR PARTIDO DE LOS JUGADORES DE LOS BLAZERS*/

/*MEDIA DE REBOTES DE LOS JUGADORES DE LA CONFERENCIA ESTE*/


/* REGULAR EXPRESIÓN - PATRONES DE BUSQUEDA PARA EL FILTRADO DE DATOS */

$ - FINAL DE LA CADENA
^ - INICIO DE LA CADENA
[] - CARACTERES A BUSCAR POR SEPARADO
. - CARACTER EXISTENTE SEA EL QUE SEA

SELECT * FROM JUGADORES WHERE procedencia REGEXP '[anj]$';
SELECT * FROM JUGADORES WHERE NOMBRE RLIKE '^[x]';

SELECT * FROM JUGADORES WHERE procedencia REGEXP '.....da$';
SELECT * FROM JUGADORES WHERE nombre REGEXP 'xa*';
select * from jugadores where nombre regexp '^m.*ac$';

REPETIDORES
-----------
#+ - una o más veces
#? - ninguna o una
#* - ninguna, una o más


/* EJEMPLOS REGEX COMPUESTAS */

SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '^k.+K.*';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '^K.+K .*';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP 'kIRK|GREG|PAU';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '(Garcia){2}';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP 'kIRK|GREG|PAU';

SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '^.a.* [oa].*$';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '^.a.* [ao].*$';

Dentro de una expresión de corchetes (escrita usando [ y ]), [=character_class=] 
representa una clase de equivalencia. Concuerda con cualquier carácter con el mismo valor de comparación. 
Por ejemplo, si o y (+) son miembros de una clase equivalente, entonces [[=o=]], [[=(+)=]], y [o(+)] son todos sinónimos. Una clase equivalente no puede utilizarse como el final de un rango.

[:character_class:]

Dentro de una expresión de corchetes (escrita usando [ y ]), [:character_class:] 
representa una clase de caracteres que concuerda con todos los caracteres pertenecientes a esa clase. 

Los nombres de clases estándar son:

alnum	Caracteres alfanumericos
alpha	Caracteres Alfabéticos
blank	Caracteres espacios en blanco
cntrl	Caracteres de Control
digit	Caracteres Dígitos
graph	Caracteres gráficos
lower	Caracteres alfabéticos en minúsculas
print	Caracteres gráficos o espacios
punct	Caracteres de puntación
space	Espacio, tabulador, nueva línea y retorno de carro
upper	Caracteres alfabéticos en mayúsculas
xdigit	Caracteres dígitos en hexadecimal



SELECT destinatario, fcompra, date_add(fcompra, interval 5 day) from envios where intermediario='correos';
select * from envios;

SELECT DESTINATARIO, INTERMEDIARIO, datediff(FENTREGA,FCOMPRA) AS DIAS_ENTREGA FROM ENVIOS;

SELECT CONCAT('ESTIMADO ',DESTINATARIO,' SU PEDIDO GESTIONADO POR ',INTERMEDIARIO,'. LLEGARA EL PRÓXIMO ',
DAYNAME(DATE_ADD(FENTREGA,  INTERVAL 3 DAY)),' ', LEFT(DATE_ADD(FENTREGA,  INTERVAL 3 DAY),10)) AS MENSAJE_ENVIO
FROM ENVIOS;

SELECT DESTINATARIO, SUBSTRING_INDEX(DESTINATARIO,' ', 1) AS NOMBRE,
length(SUBSTRING_INDEX(DESTINATARIO,' ', 1))+1 AS LONGITUD_NOMBRE,
substring(DESTINATARIO,length(SUBSTRING_INDEX(DESTINATARIO,' ', 1))+1,
length(DESTINATARIO)) AS APELLIDOS,length(DESTINATARIO) FROM ENVIOS;

select  * from equipos;
select  * from estadisticas;
select * from jugadores;
select * from partidos;

/*EQUIPOS Y CIUDAD DE LOS JUGADORES ESPAÑOLES DE LA NBA*/
SELECT NOMBRE_EQUIPO, PROCEDENCIA, JUGADORES.NOMBRE, CIUDAD 
FROM JUGADORES INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO = EQUIPOS.NOMBRE  
WHERE PROCEDENCIA='Spain';

SELECT EQUIPOS.NOMBRE, JUGADORES.PROCEDENCIA, JUGADORES.NOMBRE, EQUIPOS.CIUDAD
FROM EQUIPOS INNER JOIN JUGADORES ON JUGADORES.NOMBRE_EQUIPO = EQUIPOS.NOMBRE;

SELECT EQUIPOS.CIUDAD,COUNT(*)
FROM EQUIPOS INNER JOIN JUGADORES ON JUGADORES.NOMBRE_EQUIPO = EQUIPOS.NOMBRE
GROUP BY EQUIPOS.CIUDAD;

SELECT COUNT(distinct EQUIPOS.NOMBRE)
FROM EQUIPOS INNER JOIN JUGADORES ON JUGADORES.NOMBRE_EQUIPO = EQUIPOS.NOMBRE;

/*PUNTOS POR PARTIDO DE ‘PAU GASOL’ EN TODAS LAS TEMPORADAS*/
SELECT JUGADORES.NOMBRE, TEMPORADA, PUNTOS_POR_PARTIDO FROM ESTADISTICAS INNER JOIN JUGADORES ON
ESTADISTICAS.JUGADOR = JUGADORES.CODIGO WHERE NOMBRE = 'Pau Gasol';

/* DATOS DE ‘PAU GASOL’ */
SELECT * FROM ESTADISTICAS INNER JOIN JUGADORES ON
ESTADISTICAS.JUGADOR = JUGADORES.CODIGO WHERE JUGADORES.NOMBRE = 'Pau Gasol';

/* MEDIA DE PUNTOS_POR_PARTIDO DE CADA JUGADOR EN TODAS LAS TEMPORADAS */
SELECT NOMBRE, ROUND(AVG(PUNTOS_POR_PARTIDO),2) AS MEDIA_PUNTOS_TOTAL
FROM ESTADISTICAS INNER JOIN JUGADORES 
ON ESTADISTICAS.JUGADOR = JUGADORES.CODIGO
GROUP BY NOMBRE HAVING MEDIA_PUNTOS_TOTAL>15 
ORDER BY MEDIA_PUNTOS_TOTAL ASC;


SELECT JUGADORES.NOMBRE, PROCEDENCIA, 
ROUND(AVG(REBOTES_POR_PARTIDO),2) AS REBOTES_MEDIOS
FROM ESTADISTICAS INNER JOIN JUGADORES 
ON ESTADISTICAS.JUGADOR = JUGADORES.CODIGO
INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO = EQUIPOS.NOMBRE
WHERE PROCEDENCIA = 'Spain' GROUP BY NOMBRE
ORDER BY REBOTES_MEDIOS DESC LIMIT 1;

/* NOMBRE DE LOS JUGADORES CON LA MEDIA DE Puntos_por_partido,
Asistencias_por_partido, Tapones_por_partido 
DE LOS JUGADORES CUYO NOMBRE COMIENZA POR A */

SELECT NOMBRE, ROUND(AVG(Puntos_por_partido),2),
ROUND(AVG(Asistencias_por_partido),2),
ROUND(AVG(Tapones_por_partido),2)
FROM JUGADORES INNER JOIN ESTADISTICAS
ON JUGADORES.CODIGO = ESTADISTICAS.JUGADOR
WHERE NOMBRE LIKE 'A%' 
GROUP BY NOMBRE;

/* SACAR LOS NOMBRES DE LOS JUGADORES QUE COMIENZA CON A,
Y LA MEDIA DE PUNTOS, ASISTENCIAS Y REBOTES */
SELECT NOMBRE, ROUND(AVG(Puntos_por_partido),2) AS MEDIA_PUNTOS,
ROUND(AVG(Asistencias_por_partido),2) AS MEDIA_ASISTENCIAS,
ROUND(AVG(Tapones_por_partido),2) AS MEDIA_TAPONES
FROM JUGADORES INNER JOIN ESTADISTICAS
ON JUGADORES.CODIGO = ESTADISTICAS.JUGADOR
WHERE NOMBRE LIKE 'A%'
GROUP BY NOMBRE;

/* MEDIA DE LOS PUNTOS POR PARTIDO DE LOS PIVOTS DE LOS EQUIPOS DE LA
CONFERENCIA ESTE */

SELECT NOMBRE_EQUIPO, JUGADORES.NOMBRE,POSICION, 
ROUND(AVG(PUNTOS_POR_PARTIDO),2) AS MEDIA_PUNTOS
FROM ESTADISTICAS INNER JOIN JUGADORES 
ON JUGADORES.CODIGO = ESTADISTICAS.JUGADOR
INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO = EQUIPOS.NOMBRE
WHERE POSICION = 'C' AND CONFERENCIA = 'EAST'
GROUP BY NOMBRE
ORDER BY MEDIA_PUNTOS;