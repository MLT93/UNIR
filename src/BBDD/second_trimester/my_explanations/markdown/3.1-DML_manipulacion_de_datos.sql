/* COMPROBACIÓN DE VARIABLES ACTIVAS PARA LA CARGA DESDE FICHERO */
SHOW VARIABLES LIKE "local_infile";
SET GLOBAL local_infile = 'ON';

LOAD DATA INFILE 
'C:/ARCHIVOS/PRODUCTOS.txt'
INTO TABLE ALMACEN
FIELDS TERMINATED BY ';'
IGNORE 1 LINES;

/* SELECCIÓN Y CARGA DE DATOS EN UN FICHERO EXTERNO */
SELECT * FROM ACTORES INTO OUTFILE 'C:/ARCHIVOS/actores.txt' 
FIELDS terminated by ';' LINES TERMINATED BY '\n';


/* EJERCICIO DE CARGA FICHERO CON DATOS HETEROGENEOS PARA CARGA EN LA SIGUIENTE TABLA */
CREATE TABLE GENTE(
	NOMBRE VARCHAR(20),
    EDAD INTEGER,
    VACACIONES INTEGER,
    CIUDAD VARCHAR(20)
);

LOAD DATA INFILE 
'C:/ARCHIVOS/PRUEBA.txt'
INTO TABLE GENTE
FIELDS TERMINATED BY ','
LINES terminated by ';' starting by '--';

/* CONTENIDO FICHERO PRUEBA */
HOLA --PEDRO,23,45,GETAFE;
--ANDREA,18,53,LEGANES; ADIOS
DASDASD --LUIS,14,23,BURGOS;

/* EJEMPLO CARGA CON LOAD FICHERO ACTORES */

CREATE TABLE IF NOT EXISTS ACTORS(
	COD CHAR(2),
    NOMBRE CHAR(25),
    NACIMIENTO CHAR(15),
    NACIONALIDAD CHAR(15),
    GENERO CHAR,
    TLF CHAR(15),
    EMAIL CHAR(30),
    PREMIOS CHAR(2),
    COTIZACION CHAR(10)
);

LOAD DATA INFILE 
'C:/ARCHIVOS/actores.txt'
INTO TABLE ACTORS
FIELDS TERMINATED BY ';'
LINES terminated by '\n';


/* SALIDA DE DATOS A FICHERO EXTERNO */
SELECT * FROM ACTORS INTO OUTFILE 'C:/ARCHIVOS/actos.txt' 
FIELDS TERMINATED BY '\t';


/* EJERCICIO PRUEBA DEFINICIÓN ON DELETE CASCADE, ON UPDATE CASCADE PARA REGISTROS
EN TABLAS RELACIONADAS CON FOREIGN KEY */
CREATE TABLE CLIENTES (
	NIF VARCHAR(15) PRIMARY KEY,
    NOMBRE VARCHAR(50),
    DIRECCIÓN VARCHAR(50)
);

CREATE TABLE PAGOS (
	NIF VARCHAR(15),
    IMPORTE DOUBLE,
    FOREIGN KEY (NIF) REFERENCES CLIENTES(NIF)
    ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO CLIENTES VALUES ('111111T','PEDRO MARTINEZ','C/ FLORIDA, 23');

INSERT INTO PAGOS VALUES ('52505013S',11850);

DELETE FROM CLIENTES WHERE NIF='111111T';
UPDATE CLIENTES SET NIF='52505553S' WHERE NIF='52505013S';

/* QUERYS EJEMPLO BASE DE DATOS NBA */

SELECT NOMBRE FROM JUGADORES ORDER BY NOMBRE ASC LIMIT 25;

SELECT DISTINCT DIVISION FROM EQUIPOS WHERE CONFERENCIA='WEST';

SELECT CONFERENCIA, COUNT(NOMBRE) FROM EQUIPOS WHERE CONFERENCIA='WEST';

SELECT *  FROM JUGADORES WHERE Procedencia='Spain' AND (Nombre_equipo='Lakers' OR  Nombre_equipo='Raptors');

SELECT *  FROM JUGADORES WHERE Nombre_equipo LIKE '%wolv%';

SELECT * FROM JUGADORES WHERE PESO > 200 AND PESO < 260;

SELECT UCASE(CONCAT_WS('-',codigo,LEFT(Procedencia,2),Posicion)) AS CODIGO_ACCESO 
FROM JUGADORES WHERE PESO BETWEEN 200 AND 260 AND (Nombre_equipo='Lakers' OR Nombre_equipo='Raptors' OR Nombre_equipo='Bulls');

SELECT * FROM jugadores WHERE PROCEDENCIA LIKE 'F_O%';
SELECT * FROM jugadores WHERE PROCEDENCIA LIKE '[ads]';

SELECT * FROM JUGADORES WHERE PROCEDENCIA NOT IN ('Florida','Utah','Spain');

SELECT * FROM JUGADORES WHERE (PROCEDENCIA='Spain' and PESO>180) OR ((NOT PROCEDENCIA='Florida') AND (NOT PESO>200));

SELECT PROCEDENCIA,AVG(PESO)/2.2 FROM JUGADORES WHERE (PROCEDENCIA='Serbia' and PESO>=215) OR (Nombre_equipo='Timberwolves' AND (NOT posicion = 'g')) GROUP BY  PROCEDENCIA ;

SELECT PROCEDENCIA, NOMBRE FROM JUGADORES ORDER BY PROCEDENCIA ASC, NOMBRE ASC;

SELECT Nombre_equipo, round(avg(peso)/2.2,2) FROM JUGADORES GROUP BY NOMBRE_EQUIPO HAVING AVG(PESO/2.2)<= 100 ORDER BY NOMBRE_EQUIPO ASC;

SELECT  NOMBRE_EQUIPO, MAX(PESO)/2.2,MIN(PESO)/2.2,AVG(PESO)/2.2 FROM JUGADORES GROUP BY NOMBRE_EQUIPO;

SELECT PROCEDENCIA, NOMBRE, NOMBRE_EQUIPO FROM JUGADORES WHERE PROCEDENCIA IS NOT NULL;

SELECT CIUDAD, EQUIPOS.NOMBRE,JUGADORES.NOMBRE FROM EQUIPOS, JUGADORES, PARTIDOS WHERE EQUIPOS.NOMBRE=JUGADORES.NOMBRE_EQUIPO;


/* BASE DE DATOS EJEMPLO CREACIÓN TABLAS RELACIONADAS Y JOINS EN QUERYS */
CREATE DATABASE JOINS;
USE JOINS;

CREATE TABLE CLIENTES(
	COD INT PRIMARY KEY auto_increment,
    RAZON VARCHAR(40) NOT NULL,
    PRODUCTO INTEGER
);

ALTER TABLE CLIENTES MODIFY COLUMN RAZON VARCHAR(40);
CREATE TABLE PRODUCTOS (
	REF INTEGER PRIMARY KEY auto_increment,
    NOMBRE VARCHAR(20)
);

INSERT INTO CLIENTES (RAZON) VALUES (NULL);

INSERT INTO PRODUCTOS (NOMBRE) VALUES ('SILLA PLAYA'),
('BARBACOA METAL'),
('SOMBRILLA COVID'),
('GEL HIDROALCOHOLICO'),
('ALETAS NIÑOS'),
('FLOTADOR FLAMENTO');
 
SELECT RAZON, PRODUCTO, NOMBRE FROM CLIENTES LEFT OUTER JOIN PRODUCTOS ON CLIENTES.PRODUCTO = PRODUCTOS.REF WHERE CLIENTES.RAZON IS NULL;

ALTER TABLE CLIENTES DROP COLUMN COD;

SELECT RAZON, PRODUCTO, NOMBRE FROM CLIENTES RIGHT JOIN PRODUCTOS ON CLIENTES.PRODUCTO = PRODUCTOS.REF;

SELECT RAZON, PRODUCTO, NOMBRE FROM CLIENTES, PRODUCTOS WHERE CLIENTES.PRODUCTO = PRODUCTOS.REF;


/* QUERYS EN NBA */

SELECT * FROM JUGADORES WHERE NOMBRE = 'JamesOn Curry';

SELECT TEMPORADA,PUNTOS_POR_PARTIDO,ASISTENCIAS_POR_PARTIDO, TAPONES_POR_PARTIDO,REBOTES_POR_PARTIDO,NOMBRE, ALTURA,posicion
FROM ESTADISTICAS CROSS JOIN JUGADORES 
ON ESTADISTICAS.JUGADOR = JUGADORES.CODIGO 
WHERE TEMPORADA IS NULL ORDER BY TEMPORADA ASC;

SELECT EQUIPOS.NOMBRE,CIUDAD, CONFERENCIA, JUGADORES.NOMBRE,ALTURA,PESO
FROM EQUIPOS JOIN JUGADORES ON EQUIPOS.NOMBRE = JUGADORES.NOMBRE_EQUIPO;

SELECT nombre_equipo, nombre, ROUND(AVG(puntos_por_partido),2) AS Media_Partido FROM Estadisticas,jugadores WHERE jugador=codigo
AND procedencia LIKE 'Serbia Montenegro' GROUP BY nombre;

SELECT nombre_equipo,nombre, ROUND(AVG(puntos_por_partido),2),procedencia FROM jugadores,estadisticas WHERE jugador=codigo AND procedencia='Serbia Montenegro' GROUP BY nombre;

SELECT TEMPORADA,JUGADOR, PUNTOS_POR_PARTIDO FROM ESTADISTICAS WHERE JUGADOR IN (SELECT codigo FROM jugadores WHERE Nombre_equipo='Lakers') AND TEMPORADA='07/08';

SELECT JUGADOR, ROUND(AVG(REBOTES_POR_PARTIDO),2) AS MEDIA_REBOTES FROM ESTADISTICAS WHERE JUGADOR IN 
( SELECT CODIGO FROM JUGADORES WHERE NOMBRE_EQUIPO IN (SELECT NOMBRE  FROM EQUIPOS WHERE CONFERENCIA='East')) 
GROUP BY JUGADOR ORDER BY AVG(REBOTES_POR_PARTIDO) DESC;

#MEDIA DE REBOTES DE LOS JUGADORES DE LA CONFERENCIA EAST..
 SELECT JUGADOR, AVG(REBOTES_POR_PARTIDO) FROM ESTADISTICAS WHERE JUGADOR IN (SELECT CODIGO FROM JUGADORES WHERE NOMBRE_EQUIPO IN (SELECT NOMBRE FROM EQUIPOS WHERE CONFERENCIA='East')) GROUP BY JUGADOR;

/* ESTRUCTURA COMPLETA DE ELEMENTO EN QUERYS */
SELECT PROVINCIA,PAIS AS LUGAR 
FROM EMPRESA INNER JOIN SITUACION ON EMPRESA.PROVINCIA = SITUACION.PROV 
WHERE CIUDAD NOT IN ('MADRID','BURGOS','PALENCIA') AND CP<>'21342' AND PRESIDENCIA IS NOT NULL 
GROUP BY PAIS HAVING PROVINCIA <> 'ALSACIA' 
ORDER BY PAIS ASC, PROVINCIA ASC 
LIMIT 20;

# SI LAS TABLAS TIENEN FOREIGN KEY.... PODEMOS HACER INNER JOIN IMPLICITO
SELECT * FROM TABLA1, TABLA2 WHERE TABLA1.CAMPO = TABLA2.CAMPO;

# PUEDO HACER INNER JOIN, ENTRE TABLAS QUE NO TENGAN NINGUN FOREIGN KEY
SELECT * FROM TABLA1 INNER JOIN TABLA2 ON TABLA1.CAMPO = TABLA2.CAMPO;

# LEFT JOIN - MUESTRA TODOS LOS DATOS DE LA TABLA IZQUIERDA Y LAS COINCIDENCIAS DE LA OTRA
# RIGHT JOIN - MUESTRA TODOS LOS DATOS DE LA TABLA DERECHA Y LAS COINCIDENCIAS DE LA OTRA
# LEFT OUTER JOIN - RIGHT OUTER JOIN - MUESTRAN LOS REGISTROS CON COINCIDENTES EN LA RELACIÓN

# NATURAL JOIN - MUESTRA UNA RELACIÓN IMPLICITA ENTRA LAS TABLAS POR LOS CAMPOS QUE TIENEN UNA MISMA 
# TIPOLOGIA DE DATO Y NOMBRE

# CROSS JOIN - FULL OUTER JOIN - CRUCE DE TODOS LOS REGISTROS CON TODOS (NO SE PONE RELACIÓN ENTRE CAMPO).

SELECT * FROM EMPRESA WHERE CIF IN (SELECT CODFISCAL FROM IMPUESTOS2T WHERE CP='28009');
SELECT * FROM EMPRESA WHERE BIMES > (SELECT MAX(IMPORTEFAC) FROM FACTURACION WHERE MES='ENERO');
SELECT * FROM EMPRESA WHERE BIMES > ALL (SELECT IMPORTEFAC FROM FACTURACION WHERE MES='ENERO');
SELECT * FROM EMPRESA WHERE BIMES > ANY (SELECT IMPORTEFAC FROM FACTURACION WHERE MES='ENERO');
SELECT * FROM EMPRESA WHERE NOT EXISTS (SELECT NOMBRE FROM DEUDORES);


/*QUERYS DE EJEMPLO DE TODOS LOS TIPOS SOBRE LA BASE DE DATOS NBA*/
/*---------------------------------------------------------------*/
/*EQUIPOS Y CIUDAD DE LOS JUGADORES ESPAÑOLES DE LA NBA*/
SELECT NOMBRE_EQUIPO, PROCEDENCIA, JUGADORES.NOMBRE, CIUDAD FROM JUGADORES INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO = EQUIPOS.NOMBRE  WHERE PROCEDENCIA='Spain';

/*EQUIPOS CUYO NOMBRE COMIENZA POR H Y FINALIZA POR S*/
SELECT NOMBRE FROM EQUIPOS WHERE NOMBRE LIKE 'H%S';

/*PUNTOS POR PARTIDO DE ‘PAU GASOL’ EN TODAS LAS TEMPORADAS*/
SELECT JUGADORES.NOMBRE, TEMPORADA, PUNTOS_POR_PARTIDO FROM ESTADISTICAS INNER JOIN JUGADORES ON
ESTADISTICAS.JUGADOR = JUGADORES.CODIGO WHERE NOMBRE = 'Pau Gasol';

/*EQUIPOS QUE HAY EN LA CONFERENCIA OESTE(WEST)*/
SELECT CONFERENCIA, COUNT(NOMBRE) FROM EQUIPOS WHERE CONFERENCIA = 'West';

/*JUGADORES DE ARIZONA QUE PESAN MÁS DE 100 KG Y MIDEN MÁS DE 1.82 M (1 PIE=30.48 CM)*/
SELECT NOMBRE, PESO, ALTURA, PROCEDENCIA FROM JUGADORES WHERE PROCEDENCIA = 'Arizona' AND PESO > 100 AND ALTURA > 182;

/*PUNTOS POR PARTIDO DE LOS JUGADORES DE LOS CAVALIERS*/
SELECT JUGADORES.NOMBRE,JUGADORES.NOMBRE_EQUIPO,PUNTOS_POR_PARTIDO
FROM ESTADISTICAS INNER JOIN JUGADORES ON ESTADISTICAS.JUGADOR=JUGADORES.CODIGO
WHERE JUGADORES.NOMBRE_EQUIPO='Cavaliers';


SELECT * FROM JUGADORES WHERE NOMBRE_EQUIPO LIKE 'CA%';
SELECT * FROM JUGADORES WHERE NOMBRE_EQUIPO LIKE 'CA____';

/* ACTUALIZACIÓN DE DATOS EN CAMPOS, PARA TRANSFORMAR LOS VALORES DEL MISMO CON UPDATE */
SET SQL_SAFE_UPDATES = 0;
UPDATE JUGADORES SET PESO=PESO*0.453592;

SELECT (LEFT(ALTURA,1)*0.3048)*100,(substring(ALTURA,3,2)*0.0833333) FROM JUGADORES;

UPDATE JUGADORES SET ALTURA = (LEFT(ALTURA,1)*0.3048)*100;

SELECT * FROM JUGADORES ORDER BY CODIGO ASC;

SET SQL_SAFE_UPDATES = 0; #PERMITIR UPDATES GLOBALES


/*JUGADORES CUYA 3ª LETRA DE SU NOMBRE ES UNA ‘V’*/
SELECT NOMBRE FROM JUGADORES WHERE NOMBRE LIKE '__V%';

/*CUÁNTOS JUGADORES TIENE CADA EQUIPO DE LA CONFERENCIA OESTE*/

/*CUANTOS JUGADORES ARGENTINOS JUEGAN EN LA NBA*/

/*EN QUÉ TEMPORADA LEBRON JAMES CONSIGUIÓ MÁS PUNTOS POR PARTIDO*/

/*ASISTENCIAS POR PARTIDO DE JOSE CALDERÓN EN LA TEMPORADA 07/08*/

/*PUNTOS POR PARTIDO DE LEBRON JAMES DE LA TEMPORADA 03/04 A LA 05/06*/

/*CUÁNTOS JUGADORES TIENE CADA EQUIPO DE LA CONFERENCIA ESTE(EAST)*/

/*TAPONES POR PARTIDO DE LOS JUGADORES DE LOS BLAZERS*/

/*MEDIA DE REBOTES DE LOS JUGADORES DE LA CONFERENCIA ESTE*/


/* REGULAR EXPRESIÓN - PATRONES DE BUSQUEDA PARA EL FILTRADO DE DATOS */

$ - FINAL DE LA CADENA
^ - INICIO DE LA CADENA
[] - CARACTERES A BUSCAR POR SEPARADO
. - CARACTER EXISTENTE SEA EL QUE SEA

SELECT * FROM JUGADORES WHERE procedencia REGEXP '[anj]$';
SELECT * FROM JUGADORES WHERE NOMBRE RLIKE '^[x]';

SELECT * FROM JUGADORES WHERE procedencia REGEXP '.....da$';
SELECT * FROM JUGADORES WHERE nombre REGEXP 'xa*';
select * from jugadores where nombre regexp '^m.*ac$';

REPETIDORES
-----------
#+ - una o más veces
#? - ninguna o una
#* - ninguna, una o más


/* EJEMPLOS REGEX COMPUESTAS */

SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '^k.+K.*';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '^K.+K .*';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP 'kIRK|GREG|PAU';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '(Garcia){2}';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP 'kIRK|GREG|PAU';

SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '^.a.* [oa].*$';
SELECT * FROM JUGADORES WHERE NOMBRE REGEXP '^.a.* [ao].*$';

Dentro de una expresión de corchetes (escrita usando [ y ]), [=character_class=] 
representa una clase de equivalencia. Concuerda con cualquier carácter con el mismo valor de comparación. 
Por ejemplo, si o y (+) son miembros de una clase equivalente, entonces [[=o=]], [[=(+)=]], y [o(+)] son todos sinónimos. Una clase equivalente no puede utilizarse como el final de un rango.

[:character_class:]

Dentro de una expresión de corchetes (escrita usando [ y ]), [:character_class:] 
representa una clase de caracteres que concuerda con todos los caracteres pertenecientes a esa clase. 

Los nombres de clases estándar son:

alnum	Caracteres alfanumericos
alpha	Caracteres Alfabéticos
blank	Caracteres espacios en blanco
cntrl	Caracteres de Control
digit	Caracteres Dígitos
graph	Caracteres gráficos
lower	Caracteres alfabéticos en minúsculas
print	Caracteres gráficos o espacios
punct	Caracteres de puntación
space	Espacio, tabulador, nueva línea y retorno de carro
upper	Caracteres alfabéticos en mayúsculas
xdigit	Caracteres dígitos en hexadecimal

/* CONSULTAS SIMPLES - BASE DE DATOS JARDINERIA --------------------------------------------- */
	
	/* Codigo oficina y la ciudad donde hay oficionas*/
		SELECT CodigoOficina,ciudad FROM Oficinas;
	
	/* Cuantos empleados tiene la compañia */
		SELECT count(*) AS Nº_EMPLEADOS FROM empleados;
	
	/* Cuantos clientes hay en cada pais */
		SELECT Pais,count(codigocliente) as nº_clientes FROM Clientes GROUP BY Pais;
		
	/* Cual fue el pago medio en 2007 */
		SELECT avg(Cantidad) as Pago_Medio FROM Pagos WHERE YEAR(FechaPago)=2007;
	
	/* Cuantos pedidos están en los posibles estados, ordenados descendentemente por número de pedido */
		SELECT estado, count(codigopedido) as Número FROM Pedidos GROUP BY Estado ORDER BY count(codigopedido) DESC;
	
	/* El precio del pedido más caro y el más barato */
		SELECT max(PrecioVenta) as Precio_Maximo, min(PrecioVenta) as Precio_Minimo FROM Productos;
	
	/* Nombre y apellidos de los empleados que no son representantes de ventas */
		SELECT nombre, concat(apellido1, apellido2) AS APELLIDOS, puesto FROM EMPLEADOS WHERE puesto<>'Representante Ventas';

	/* Los distintos estados por los que puede pasar un pedido */
		SELECT DISTINCT estado FROM pedidos;
		
	/* Listado de los 10 códigos de productos más pedidos ordenado por cantidad pedida */
		SELECT codigoproducto, sum(cantidad) as CANTIDAD_PEDIDA FROM DetallePedidos GROUP BY codigoproducto ORDER BY sum(cantidad) desc LIMIT 10;

	/* -------------------- BASE DE DATOS - NBA -------------------*/
		
	/* Nombre de las divisiones de la conferencia Oeste */ 
	SELECT DISTINCT division FROM equipos WHERE conferencia='WEST';
	
	/* Nombre de los equipos con más de un jugador francés */
	SELECT nombre_equipo, count(codigo) as numero_jugadores FROM jugadores WHERE procedencia='france' GROUP BY nombre_equipo HAVING count(codigo)>1;
	
	/* Número de jugadores italianos, españoles o franceses en la NBA */
	SELECT count(codigo) FROM jugadores WHERE procedencia='Italy' or procedencia = 'spain' or procedencia = 'france';
		
/* SUBCONSULTAS - BASE DE DATOS JARDINERIA --------------------------------------------- */
	
	/* Nombre de los clientes con mayor limite de credito */
		SELECT nombrecliente FROM clientes WHERE limitecredito=(SELECT Max(limitecredito) FROM clientes);
	
	/* Nombre, Apellidos y cargo de los empleados que no representan a ningún cliente y otra con los que tengan represantados */
		SELECT nombre, concat(apellido1, apellido2) AS APELLIDOS, puesto FROM EMPLEADOS WHERE codigoempleado NOT IN (SELECT codigoempleadorepventas FROM clientes);
		SELECT nombre, concat(apellido1, apellido2) AS APELLIDOS, puesto FROM EMPLEADOS WHERE codigoempleado IN (SELECT codigoempleadorepventas FROM clientes);
	
	/* -------------------- BASE DE DATOS - NBA -------------------*/
	
	/* Puntos por partido de los jugadores de los Knicks en la temporada 2007/2008*/
	SELECT jugador, puntos_por_partido FROM estadisticas WHERE jugador in (select codigo from jugadores where nombre_equipo='knicks') and temporada='07/08';		

	/* Obtener la media de rebotes de los jugadores de la Conferencia Este */ 
	SELECT jugador, avg(rebotes_por_partido) FROM estadisticas WHERE jugador in (select codigo from jugadores where nombre_equipo in (select nombre from equipos where conferencia='east')) group by jugador;
	
/* CONSULTAS MULTIPLES - BASE DE DATOS JARDINERIA --------------------------------------------- */

	/* CLIENTE Y NOMBRE + APELLIDO DE SU REPRESENTANTE DE VENTAS*/
	SELECT NOMBRECLIENTE, CONCAT(NOMBRE,' ',APELLIDO1) AS REPRESENTANTE_VENTAS
	FROM CLIENTES INNER JOIN EMPLEADOS ON CLIENTES.CODIGOEMPLEADOREPVENTAS=EMPLEADOS.CODIGOEMPLEADO;	

	/* NOMBRE DE CLIENTE QUE NO HAYAN REALIZADO PAGOS Y EL NOMBRE DEL REPRESENTANTE */
	SELECT NOMBRECLIENTE, NOMBRE AS NOMBRE_EMPLEADO, APELLIDO1 AS APELLIDO_EMPLEADO FROM CLIENTES INNER JOIN EMPLEADOS ON
	CLIENTES.CODIGOEMPLEADOREPVENTAS=EMPLEADOS.CODIGOEMPLEADO WHERE CODIGOCLIENTE NOT IN (SELECT CODIGOCLIENTE FROM PAGOS);
	
	/* VENTA TOTAL DE LOS PRODUCTOS QUE HAYAN FACTURADO MAS DE 2500 EUROS. MOSTRANDO NOMBRE PRODUCTO, UNIDADES VENDIDAS, TOTAL FACTURADO Y PVP CON EL 21% DE IVA INCLUIDO */
	SELECT NOMBRE, SUM(CANTIDAD) AS TOTALUNIDADES, SUM(CANTIDAD*PRECIOUNIDAD) AS TOTALFACTURADO, SUM(CANTIDAD*PRECIOUNIDAD)*1.21 AS PVP
	FROM DETALLEPEDIDOS NATURAL JOIN PRODUCTOS GROUP BY NOMBRE
	HAVING SUM(CANTIDAD*PRECIOUNIDAD)>2500;
	
	/* LISTADO DE OFICINAS DE VENTA QUE TENGAN CLIENTES EN FUENLABRADA */
	SELECT CONCAT(OFICINAS.LINEADIRECCION1,' ', OFICINAS.LINEADIRECCION2), OFICINAS.CIUDAD
	FROM OFICINAS, EMPLEADOS,CLIENTES
	WHERE OFICINAS.CODIGOOFICINA=EMPLEADOS.CODIGOOFICINA AND EMPLEADOS.CODIGOEMPLEADO=CLIENTES.CODIGOEMPLEADOREPVENTAS AND
	CLIENTES.CIUDAD='FUENLABRADA';
	
	/* -------------------- BASE DE DATOS - NBA -------------------*/
	
	/* Nombre de los jugadores, el nombre del equipo al que pertenecen y la ciudad de aquellos que han realizado algún tapón en la temporada 2007/2008 */
	SELECT jugadores.nombre, nombre_equipo, ciudad FROM jugadores INNER JOIN equipos on nombre_equipo=equipos.nombre WHERE codigo in (select jugador from estadisticas where tapones_por_partido>0 and temporada='07/08');

	/* Nombre, equipo y la media de puntos de todas las temporadas de los jugadores españoles de la NBA */
	SELECT nombre, nombre_equipo, avg(puntos_por_partido) FROM estadisticas INNER JOIN jugadores on jugador=codigo WHERE procedencia like 'Spain' GROUP BY nombre;
	
/* CONSULTA CON TABLA DERIVADAS */ 

	/* OBTENER EL CLIENTE QUE HIZO EL PEDIDO DE MAYOR IMPORTE */

#QUERY A: CUANTIA DE LOS PEDIDOS

	(SELECT CODIGOPEDIDO, CODIGOCLIENTE, SUM(CANTIDAD*PRECIOUNIDAD) AS TOTAL
	FROM PEDIDOS NATURAL JOIN DETALLEPEDIDOS
	GROUP BY CODIGOPEDIDO, CODIGOCLIENTE) TOTALPEDIDOS;

#QUERY B: PEDIDO MAS CARO

	SELECT MAX(TOTAL) FROM
	(SELECT CODIGOPEDIDO, CODIGOCLIENTE, SUM(CANTIDAD*PRECIOUNIDAD) AS TOTAL
	FROM PEDIDOS NATURAL JOIN DETALLEPEDIDOS
	GROUP BY CODIGOPEDIDO, CODIGOCLIENTE) TOTALPEDIDOS;

#QUERY DEFINITIVA --------

	SELECT TOTALPEDIDOS.CODIGOCLIENTE, NOMBRECLIENTE FROM 
	(SELECT CODIGOPEDIDO, CODIGOCLIENTE, SUM(CANTIDAD*PRECIOUNIDAD) AS TOTAL
	FROM PEDIDOS NATURAL JOIN DETALLEPEDIDOS
	GROUP BY CODIGOPEDIDO, CODIGOCLIENTE) TOTALPEDIDOS
	INNER JOIN CLIENTES ON
	CLIENTES.CODIGOCLIENTE=TOTALPEDIDOS.CODIGOCLIENTE
	WHERE TOTAL=
	(SELECT MAX(TOTAL) FROM
	(SELECT CODIGOPEDIDO, CODIGOCLIENTE, SUM(CANTIDAD*PRECIOUNIDAD) AS TOTAL
	FROM PEDIDOS NATURAL JOIN DETALLEPEDIDOS
	GROUP BY CODIGOPEDIDO, CODIGOCLIENTE) TOTALPEDIDOS);

		
INSERT - 

	INSERT [ LOW_PRIORITY | DELAYED | HIGH_PRIORITY ] [ IGNORE ]
	INTO table
	(column1, column2, ... )
	VALUES
	(expression1, expression2, ... ),
	(expression1, expression2, ... ),
	[ ON DUPLICATE KEY UPDATE 
		dup_column1 = dup_expression1,
		dup_column2 = dup_expression2,
		... ];
	
	INSERT [ LOW_PRIORITY | HIGH_PRIORITY ] [ IGNORE ]
	INTO table
	(column1, column2, ... )
	SELECT expression1, expression2, ...
	FROM source_table
	[WHERE conditions]
	[ ON DUPLICATE KEY UPDATE 
		dup_column1 = dup_expression1,
		dup_column2 = dup_expression2,
		... ];
		
	/*---------------------------------------------------*/
	
	INSERT INTO MASCOTAS VALUES (2,'CALCETINES','GATO COMUN','5555748L');
	
	INSERT INTO MASCOTAS (CODIGO, NOMBRE, RAZA) VALUES (1,'SALTITOS','SIAMES');
	
	INSERT INTO MASCOTAS VALUES (2,'CALCETINES','GATO COMUN','5555748L',DEFAULT);
	
	INSERT INTO MASCOTAS (CODIGO, NOMBRE, RAZA)
				 VALUES (1,'SALTITOS','SIAMES'),
						(2,'COPO DE NIEVE','DOGO'),
						(3,'SATAN','DOBERMAN');
						
	
	INSERT INTO BACKUP_MASCOTAS SELECT * FROM MASCOTAS; /* PODEMOS USAR AGRUPACIONES, ORDENACIONES, ... */

/* CARGA DE DATOS EN TABLAS DESDE FICHEROS */

LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name'
    [REPLACE | IGNORE]
    INTO TABLE tbl_name
    [PARTITION (partition_name,...)]
    [CHARACTER SET charset_name]
    [{FIELDS | COLUMNS}
        [TERMINATED BY 'string']
        [[OPTIONALLY] ENCLOSED BY 'char']
        [ESCAPED BY 'char']
    ]
    [LINES
        [STARTING BY 'string']
        [TERMINATED BY 'string']
    ]
    [IGNORE number {LINES | ROWS}]
    [(col_name_or_user_var,...)]
    [SET col_name = expr,...]
	
LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name
FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '\n';

LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name
FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '\n';

UPDATE -------------------------------------------------------------------- 

	UPDATE nombre_tabla SET nombre_col1=expre1, nombre-col2=expre2 ... WHERE filtro
	
	ELIMINAR CONTROL EN ACTUALIZACIONES: SET SQL_SAFE_UPDATES=0;

	UPDATE JUGADORES SET nombre_equipo='Bulls' WHERE nombre='Pau Gasol';

	UPDATE JUGADORES SET nombre_equipo='Celtics', Peso=200 WHERE Nombre='Pau Gasol';

	UPDATE JUGADORES SET peso=peso*0.4535;

	UPDATE EMPLEADOS SET SALARIO = SALARIO * 1.021, PRECIO_HORA = PRECIO_HORA * 1.021 WHERE SALARIO < 2500;


DELETE ----------------------------------------------------------------------

	DELETE FROM nombre_tabla WHERE filtro;

	DELETE FROM jugadores WHERE nombre='Pau Gasol';

	DELETE FROM jugadores;

	DELETE FROM EMPLEADOS WHERE codigoempleado NOT IN (SELECT CodigoEmpleadoRepVentas FROM CLIENTES) AND puesto='Representante Ventas';

	------- EJEMPLO BORRADO Y ACTUALIZACIÓN EN CASCADA ------------------------------

	----- CREAMOS LAS TABLAS -------------

	CREATE TABLE CLIENTES (
		DNI VARCHAR(15) PRIMARY KEY,
		NOMBRE VARCHAR(50),
		DIRECCION VARCHAR(50)
	)ENGINE=INNODB;

	CREATE TABLE PAGOS_PENDIENTES (
		DNI VARCHAR(15),
		IMPORTE DOUBLE,
		FOREIGN KEY (DNI) REFERENCES CLIENTES(DNI)
		ON DELETE CASCADE ON UPDATE CASCADE
	) ENGINE=INNODB;


	INSERT INTO CLIENTES VALUES ('5555672L','PEPE CIFUENTES','C/ LOS ALMENDROS, 23');

	INSERT INTO PAGOS_PENDIENTES VALUES ('5555672L',500);
	INSERT INTO PAGOS_PENDIENTES VALUES ('5555672L',300.50);

	DELETE FROM CLIENTES WHERE DNI='5555672L';

	SELECT * FROM PAGOS_PENDIENTES; /* SE HAN BORRADO LOS APUNTES DEL CLIENTE */

	/* SI EN LUGAR DE HABER BORRADO HUBIESEMOS QUERIDO ACTUALIZAR EL DNI */ 

	UPDATE CLIENTES SER DNI='5555111L' WHERE DNI='5555672L';

	SELECT * FROM PAGOS_PENDIENTES;
